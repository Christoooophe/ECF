name: ECF

on:
  push:
    branches: [ master ]

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Run tests
        run: dotnet test --no-build --configuration Release --collect:"XPlat Code Coverage"

  trivy-scan:
    name: Trivy
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Run Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: ./bin/Release
          ignore-unfixed: true
          format: table
          exit-code: 1
          severity: CRITICAL,HIGH,MEDIUM

  sonar-scan:
    name: SonarQube
    runs-on: ubuntu-latest
    needs: build-and-test
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
  
      - name: SonarQube Scan
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"test-api-back-end" /d:sonar.host.url="http://localhost:9000" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          dotnet build
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
